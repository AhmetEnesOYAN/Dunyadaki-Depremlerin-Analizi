# Gerekli kütüphaneleri import etme
import pandas as pd
import matplotlib.pyplot as plt

# Dosya yolu (GitHub'daki dosya yolunuzu burada belirtin)
file_path = "earthquake-dataset.csv"  # Dosya aynı klasördeyse sadece adı yeterli

# CSV dosyasını okuma
df = pd.read_csv(file_path)

# Veri setindeki sütun isimlerini gösterme
print("Sütun İsimleri:")
print(df.columns)  # Bu kod sütun isimlerini gösterecek

# Verinin ilk 5 satırını gösterme
print("Verinin İlk 5 Satırı:")
print(df.head())

# Eksik verileri kontrol etme
print("\nEksik Veriler:")
print(df.isnull().sum())  # Her sütundaki eksik verilerin sayısını gösterme

# Eğer eksik veriler varsa, bunları silme
df = df.dropna()  # Boş hücreleri silme

# Temizlenmiş veri setinin ilk 5 satırını tekrar gösterme
print("\nTemizlenmiş Verinin İlk 5 Satırı:")
print(df.head())

# Deprem büyüklüğünün dağılımını görselleştirme
plt.figure(figsize=(10, 6))
plt.hist(df['mag'], bins=20, color='blue', alpha=0.7)
plt.title('Deprem Büyüklüğünün Dağılımı')
plt.xlabel('Büyüklük')
plt.ylabel('Frekans')
plt.grid(True)
plt.savefig("magnitude_histogram.png")  # Grafiği dosya olarak kaydetme
plt.close()  # Pencereyi kapatma

# Derinlik ve büyüklük arasındaki ilişkiyi görselleştirme
plt.figure(figsize=(10, 6))
plt.scatter(df['depth'], df['mag'], color='green', alpha=0.5)
plt.title('Derinlik ve Deprem Büyüklüğü Arasındaki İlişki')
plt.xlabel('Derinlik (km)')
plt.ylabel('Büyüklük')
plt.grid(True)
plt.savefig("depth_vs_magnitude.png")  # Grafiği dosya olarak kaydetme
plt.close()

# Depremlerin zamanla nasıl değiştiğini görmek için 'time' sütununu datetime formatına çevirelim
df['time'] = pd.to_datetime(df['time'], errors='coerce', utc=True)

# Yıl bazında deprem sayısını hesaplayalım
df['year'] = df['time'].dt.year
yearly_earthquakes = df['year'].value_counts().sort_index()

# Depremlerin yıllara göre dağılımını görselleştirelim
plt.figure(figsize=(12, 6))
yearly_earthquakes.plot(kind='bar', color='orange', alpha=0.7)
plt.title('Yıllara Göre Deprem Sayısı')
plt.xlabel('Yıl')
plt.ylabel('Deprem Sayısı')
plt.grid(True)
plt.savefig("yearly_earthquakes.png")  # Grafiği dosya olarak kaydetme
plt.close()

# Coğrafi dağılımı görselleştirme
plt.figure(figsize=(10, 6))
plt.scatter(df['longitude'], df['latitude'], color='red', alpha=0.5, s=1)
plt.title('Depremlerin Coğrafi Dağılımı')
plt.xlabel('Boylam (Longitude)')
plt.ylabel('Enlem (Latitude)')
plt.grid(True)
plt.savefig("geographical_distribution.png")  # Grafiği dosya olarak kaydetme
plt.close()

# Makine öğrenmesi modelleri için kütüphaneler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.neighbors import KNeighborsRegressor

# Özellikler ve etiketleri ayıralım
X = df[['depth']]
y = df['mag']

# Eğitim ve test verisi olarak bölme
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred = lr_model.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred)
print(f"Linear Regression Mean Squared Error (MSE): {mse_lr:.2f}")

# Random Forest
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
mse_rf = mean_squared_error(y_test, y_pred_rf)
print(f"Random Forest Mean Squared Error (MSE): {mse_rf:.2f}")

# Support Vector Machine
svm_model = SVR(kernel='linear')
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)
mse_svm = mean_squared_error(y_test, y_pred_svm)
print(f"Support Vector Machine Mean Squared Error (MSE): {mse_svm:.2f}")

# Gradient Boosting
gb_model = GradientBoostingRegressor(n_estimators=100, random_state=42)
gb_model.fit(X_train, y_train)
y_pred_gb = gb_model.predict(X_test)
mse_gb = mean_squared_error(y_test, y_pred_gb)
print(f"Gradient Boosting Mean Squared Error (MSE): {mse_gb:.2f}")

# K-Nearest Neighbors
knn_model = KNeighborsRegressor(n_neighbors=5)
knn_model.fit(X_train, y_train)
y_pred_knn = knn_model.predict(X_test)
mse_knn = mean_squared_error(y_test, y_pred_knn)
print(f"K-Nearest Neighbors Mean Squared Error (MSE): {mse_knn:.2f}")
